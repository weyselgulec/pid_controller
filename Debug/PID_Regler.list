
PID_Regler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c20  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002ecc  08002ecc  00012ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08002ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000010  08002ee0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400007c  08002ee0  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c467  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001872  00000000  00000000  0002c4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b90  00000000  00000000  0002dd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008ec  00000000  00000000  0002e8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003584e  00000000  00000000  0002f1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000cec7  00000000  00000000  00064a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a151  00000000  00000000  000718f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003054  00000000  00000000  001cba44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000071  00000000  00000000  001cea98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002ea0 	.word	0x08002ea0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08002ea0 	.word	0x08002ea0

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 fb38 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f806 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f8f4 	bl	80004d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002e8:	f000 f87c 	bl	80003e4 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <main+0x14>
	...

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b09c      	sub	sp, #112	; 0x70
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002fa:	224c      	movs	r2, #76	; 0x4c
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fda2 	bl	8002e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2220      	movs	r2, #32
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fd9c 	bl	8002e48 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000310:	2002      	movs	r0, #2
 8000312:	f000 fe69 	bl	8000fe8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000316:	2300      	movs	r3, #0
 8000318:	603b      	str	r3, [r7, #0]
 800031a:	4b30      	ldr	r3, [pc, #192]	; (80003dc <SystemClock_Config+0xec>)
 800031c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800031e:	4a2f      	ldr	r2, [pc, #188]	; (80003dc <SystemClock_Config+0xec>)
 8000320:	f023 0301 	bic.w	r3, r3, #1
 8000324:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemClock_Config+0xec>)
 8000328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemClock_Config+0xf0>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a2a      	ldr	r2, [pc, #168]	; (80003e0 <SystemClock_Config+0xf0>)
 8000336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemClock_Config+0xf0>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000348:	bf00      	nop
 800034a:	4b25      	ldr	r3, [pc, #148]	; (80003e0 <SystemClock_Config+0xf0>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000356:	d1f8      	bne.n	800034a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000358:	2301      	movs	r3, #1
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800035c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000360:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	2302      	movs	r3, #2
 8000364:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000366:	2302      	movs	r3, #2
 8000368:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800036a:	2301      	movs	r3, #1
 800036c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800036e:	2318      	movs	r3, #24
 8000370:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000372:	2302      	movs	r3, #2
 8000374:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000376:	2304      	movs	r3, #4
 8000378:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800037a:	2302      	movs	r3, #2
 800037c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800037e:	230c      	movs	r3, #12
 8000380:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000382:	2300      	movs	r3, #0
 8000384:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800038e:	4618      	mov	r0, r3
 8000390:	f000 fe64 	bl	800105c <HAL_RCC_OscConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800039a:	f000 f985 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039e:	233f      	movs	r3, #63	; 0x3f
 80003a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a2:	2303      	movs	r3, #3
 80003a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2101      	movs	r1, #1
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 faa4 	bl	8001910 <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80003ce:	f000 f96b 	bl	80006a8 <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3770      	adds	r7, #112	; 0x70
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	58000400 	.word	0x58000400
 80003e0:	58024800 	.word	0x58024800

080003e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08e      	sub	sp, #56	; 0x38
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f8:	f107 031c 	add.w	r3, r7, #28
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000404:	463b      	mov	r3, r7
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]
 8000412:	615a      	str	r2, [r3, #20]
 8000414:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000416:	4b2d      	ldr	r3, [pc, #180]	; (80004cc <MX_TIM2_Init+0xe8>)
 8000418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800041c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 800041e:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <MX_TIM2_Init+0xe8>)
 8000420:	222f      	movs	r2, #47	; 0x2f
 8000422:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000424:	4b29      	ldr	r3, [pc, #164]	; (80004cc <MX_TIM2_Init+0xe8>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <MX_TIM2_Init+0xe8>)
 800042c:	2263      	movs	r2, #99	; 0x63
 800042e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000430:	4b26      	ldr	r3, [pc, #152]	; (80004cc <MX_TIM2_Init+0xe8>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000436:	4b25      	ldr	r3, [pc, #148]	; (80004cc <MX_TIM2_Init+0xe8>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800043c:	4823      	ldr	r0, [pc, #140]	; (80004cc <MX_TIM2_Init+0xe8>)
 800043e:	f001 fd97 	bl	8001f70 <HAL_TIM_Base_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000448:	f000 f92e 	bl	80006a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800044c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000450:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000456:	4619      	mov	r1, r3
 8000458:	481c      	ldr	r0, [pc, #112]	; (80004cc <MX_TIM2_Init+0xe8>)
 800045a:	f001 ff55 	bl	8002308 <HAL_TIM_ConfigClockSource>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000464:	f000 f920 	bl	80006a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000468:	4818      	ldr	r0, [pc, #96]	; (80004cc <MX_TIM2_Init+0xe8>)
 800046a:	f001 fdd8 	bl	800201e <HAL_TIM_PWM_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000474:	f000 f918 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000478:	2300      	movs	r3, #0
 800047a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800047c:	2300      	movs	r3, #0
 800047e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000480:	f107 031c 	add.w	r3, r7, #28
 8000484:	4619      	mov	r1, r3
 8000486:	4811      	ldr	r0, [pc, #68]	; (80004cc <MX_TIM2_Init+0xe8>)
 8000488:	f002 fc50 	bl	8002d2c <HAL_TIMEx_MasterConfigSynchronization>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000492:	f000 f909 	bl	80006a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000496:	2360      	movs	r3, #96	; 0x60
 8000498:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800049e:	2300      	movs	r3, #0
 80004a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a6:	463b      	mov	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	4619      	mov	r1, r3
 80004ac:	4807      	ldr	r0, [pc, #28]	; (80004cc <MX_TIM2_Init+0xe8>)
 80004ae:	f001 fe17 	bl	80020e0 <HAL_TIM_PWM_ConfigChannel>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80004b8:	f000 f8f6 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004bc:	4803      	ldr	r0, [pc, #12]	; (80004cc <MX_TIM2_Init+0xe8>)
 80004be:	f000 f933 	bl	8000728 <HAL_TIM_MspPostInit>

}
 80004c2:	bf00      	nop
 80004c4:	3738      	adds	r7, #56	; 0x38
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	2400002c 	.word	0x2400002c

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08c      	sub	sp, #48	; 0x30
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 031c 	add.w	r3, r7, #28
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	4b6a      	ldr	r3, [pc, #424]	; (8000690 <MX_GPIO_Init+0x1c0>)
 80004e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ec:	4a68      	ldr	r2, [pc, #416]	; (8000690 <MX_GPIO_Init+0x1c0>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004f6:	4b66      	ldr	r3, [pc, #408]	; (8000690 <MX_GPIO_Init+0x1c0>)
 80004f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	61bb      	str	r3, [r7, #24]
 8000502:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000504:	4b62      	ldr	r3, [pc, #392]	; (8000690 <MX_GPIO_Init+0x1c0>)
 8000506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800050a:	4a61      	ldr	r2, [pc, #388]	; (8000690 <MX_GPIO_Init+0x1c0>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000514:	4b5e      	ldr	r3, [pc, #376]	; (8000690 <MX_GPIO_Init+0x1c0>)
 8000516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800051a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b5b      	ldr	r3, [pc, #364]	; (8000690 <MX_GPIO_Init+0x1c0>)
 8000524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000528:	4a59      	ldr	r2, [pc, #356]	; (8000690 <MX_GPIO_Init+0x1c0>)
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000532:	4b57      	ldr	r3, [pc, #348]	; (8000690 <MX_GPIO_Init+0x1c0>)
 8000534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000540:	4b53      	ldr	r3, [pc, #332]	; (8000690 <MX_GPIO_Init+0x1c0>)
 8000542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000546:	4a52      	ldr	r2, [pc, #328]	; (8000690 <MX_GPIO_Init+0x1c0>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000550:	4b4f      	ldr	r3, [pc, #316]	; (8000690 <MX_GPIO_Init+0x1c0>)
 8000552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055e:	4b4c      	ldr	r3, [pc, #304]	; (8000690 <MX_GPIO_Init+0x1c0>)
 8000560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000564:	4a4a      	ldr	r2, [pc, #296]	; (8000690 <MX_GPIO_Init+0x1c0>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800056e:	4b48      	ldr	r3, [pc, #288]	; (8000690 <MX_GPIO_Init+0x1c0>)
 8000570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000574:	f003 0308 	and.w	r3, r3, #8
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800057c:	4b44      	ldr	r3, [pc, #272]	; (8000690 <MX_GPIO_Init+0x1c0>)
 800057e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000582:	4a43      	ldr	r2, [pc, #268]	; (8000690 <MX_GPIO_Init+0x1c0>)
 8000584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800058c:	4b40      	ldr	r3, [pc, #256]	; (8000690 <MX_GPIO_Init+0x1c0>)
 800058e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2112      	movs	r1, #18
 800059e:	483d      	ldr	r0, [pc, #244]	; (8000694 <MX_GPIO_Init+0x1c4>)
 80005a0:	f000 fd08 	bl	8000fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80005aa:	483b      	ldr	r0, [pc, #236]	; (8000698 <MX_GPIO_Init+0x1c8>)
 80005ac:	f000 fd02 	bl	8000fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2140      	movs	r1, #64	; 0x40
 80005b4:	4839      	ldr	r0, [pc, #228]	; (800069c <MX_GPIO_Init+0x1cc>)
 80005b6:	f000 fcfd 	bl	8000fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	4619      	mov	r1, r3
 80005d0:	4833      	ldr	r0, [pc, #204]	; (80006a0 <MX_GPIO_Init+0x1d0>)
 80005d2:	f000 fb3f 	bl	8000c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80005d6:	2312      	movs	r3, #18
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	4619      	mov	r1, r3
 80005ec:	4829      	ldr	r0, [pc, #164]	; (8000694 <MX_GPIO_Init+0x1c4>)
 80005ee:	f000 fb31 	bl	8000c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80005f2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80005f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4619      	mov	r1, r3
 800060a:	4823      	ldr	r0, [pc, #140]	; (8000698 <MX_GPIO_Init+0x1c8>)
 800060c:	f000 fb22 	bl	8000c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000610:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000616:	2302      	movs	r3, #2
 8000618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000622:	2307      	movs	r3, #7
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4619      	mov	r1, r3
 800062c:	481d      	ldr	r0, [pc, #116]	; (80006a4 <MX_GPIO_Init+0x1d4>)
 800062e:	f000 fb11 	bl	8000c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000632:	2340      	movs	r3, #64	; 0x40
 8000634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	4619      	mov	r1, r3
 8000648:	4814      	ldr	r0, [pc, #80]	; (800069c <MX_GPIO_Init+0x1cc>)
 800064a:	f000 fb03 	bl	8000c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000652:	2300      	movs	r3, #0
 8000654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	4619      	mov	r1, r3
 8000660:	480e      	ldr	r0, [pc, #56]	; (800069c <MX_GPIO_Init+0x1cc>)
 8000662:	f000 faf7 	bl	8000c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000666:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000678:	230a      	movs	r3, #10
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_GPIO_Init+0x1c4>)
 8000684:	f000 fae6 	bl	8000c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000688:	bf00      	nop
 800068a:	3730      	adds	r7, #48	; 0x30
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	58024400 	.word	0x58024400
 8000694:	58020000 	.word	0x58020000
 8000698:	58020400 	.word	0x58020400
 800069c:	58021800 	.word	0x58021800
 80006a0:	58020800 	.word	0x58020800
 80006a4:	58020c00 	.word	0x58020c00

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <HAL_MspInit+0x30>)
 80006bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006c0:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_MspInit+0x30>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x30>)
 80006cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	58024400 	.word	0x58024400

080006e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006f8:	d10e      	bne.n	8000718 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_TIM_Base_MspInit+0x3c>)
 80006fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000700:	4a08      	ldr	r2, [pc, #32]	; (8000724 <HAL_TIM_Base_MspInit+0x3c>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_TIM_Base_MspInit+0x3c>)
 800070c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	58024400 	.word	0x58024400

08000728 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000748:	d11e      	bne.n	8000788 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <HAL_TIM_MspPostInit+0x68>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <HAL_TIM_MspPostInit+0x68>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <HAL_TIM_MspPostInit+0x68>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000768:	2301      	movs	r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000778:	2301      	movs	r3, #1
 800077a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <HAL_TIM_MspPostInit+0x6c>)
 8000784:	f000 fa66 	bl	8000c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	58024400 	.word	0x58024400
 8000794:	58020000 	.word	0x58020000

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e4:	f000 f926 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007f0:	4b37      	ldr	r3, [pc, #220]	; (80008d0 <SystemInit+0xe4>)
 80007f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f6:	4a36      	ldr	r2, [pc, #216]	; (80008d0 <SystemInit+0xe4>)
 80007f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000800:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <SystemInit+0xe8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f003 030f 	and.w	r3, r3, #15
 8000808:	2b06      	cmp	r3, #6
 800080a:	d807      	bhi.n	800081c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800080c:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <SystemInit+0xe8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f023 030f 	bic.w	r3, r3, #15
 8000814:	4a2f      	ldr	r2, [pc, #188]	; (80008d4 <SystemInit+0xe8>)
 8000816:	f043 0307 	orr.w	r3, r3, #7
 800081a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800081c:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <SystemInit+0xec>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a2d      	ldr	r2, [pc, #180]	; (80008d8 <SystemInit+0xec>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000828:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <SystemInit+0xec>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800082e:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <SystemInit+0xec>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4929      	ldr	r1, [pc, #164]	; (80008d8 <SystemInit+0xec>)
 8000834:	4b29      	ldr	r3, [pc, #164]	; (80008dc <SystemInit+0xf0>)
 8000836:	4013      	ands	r3, r2
 8000838:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <SystemInit+0xe8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	2b00      	cmp	r3, #0
 8000844:	d007      	beq.n	8000856 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000846:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <SystemInit+0xe8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f023 030f 	bic.w	r3, r3, #15
 800084e:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <SystemInit+0xe8>)
 8000850:	f043 0307 	orr.w	r3, r3, #7
 8000854:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <SystemInit+0xec>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <SystemInit+0xec>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <SystemInit+0xec>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <SystemInit+0xec>)
 800086a:	4a1d      	ldr	r2, [pc, #116]	; (80008e0 <SystemInit+0xf4>)
 800086c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <SystemInit+0xec>)
 8000870:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <SystemInit+0xf8>)
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <SystemInit+0xec>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <SystemInit+0xfc>)
 8000878:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <SystemInit+0xec>)
 800087c:	2200      	movs	r2, #0
 800087e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <SystemInit+0xec>)
 8000882:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <SystemInit+0xfc>)
 8000884:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <SystemInit+0xec>)
 8000888:	2200      	movs	r2, #0
 800088a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <SystemInit+0xec>)
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <SystemInit+0xfc>)
 8000890:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <SystemInit+0xec>)
 8000894:	2200      	movs	r2, #0
 8000896:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <SystemInit+0xec>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <SystemInit+0xec>)
 800089e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <SystemInit+0xec>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <SystemInit+0x100>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <SystemInit+0x104>)
 80008b0:	4013      	ands	r3, r2
 80008b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008b6:	d202      	bcs.n	80008be <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <SystemInit+0x108>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <SystemInit+0x10c>)
 80008c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80008c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00
 80008d4:	52002000 	.word	0x52002000
 80008d8:	58024400 	.word	0x58024400
 80008dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80008e0:	02020200 	.word	0x02020200
 80008e4:	01ff0000 	.word	0x01ff0000
 80008e8:	01010280 	.word	0x01010280
 80008ec:	5c001000 	.word	0x5c001000
 80008f0:	ffff0000 	.word	0xffff0000
 80008f4:	51008108 	.word	0x51008108
 80008f8:	52004000 	.word	0x52004000

080008fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000934 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000900:	f7ff ff74 	bl	80007ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	; (800093c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	; (8000948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f002 fa95 	bl	8002e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092e:	f7ff fcd3 	bl	80002d8 <main>
  bx  lr
 8000932:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000934:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000938:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800093c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000940:	08002ed0 	.word	0x08002ed0
  ldr r2, =_sbss
 8000944:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000948:	2400007c 	.word	0x2400007c

0800094c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC3_IRQHandler>
	...

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000956:	2003      	movs	r0, #3
 8000958:	f000 f94a 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800095c:	f001 f98e 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8000960:	4602      	mov	r2, r0
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_Init+0x68>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	f003 030f 	and.w	r3, r3, #15
 800096c:	4913      	ldr	r1, [pc, #76]	; (80009bc <HAL_Init+0x6c>)
 800096e:	5ccb      	ldrb	r3, [r1, r3]
 8000970:	f003 031f 	and.w	r3, r3, #31
 8000974:	fa22 f303 	lsr.w	r3, r2, r3
 8000978:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_Init+0x68>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_Init+0x6c>)
 8000984:	5cd3      	ldrb	r3, [r2, r3]
 8000986:	f003 031f 	and.w	r3, r3, #31
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	fa22 f303 	lsr.w	r3, r2, r3
 8000990:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <HAL_Init+0x70>)
 8000992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000994:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <HAL_Init+0x74>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800099a:	2000      	movs	r0, #0
 800099c:	f000 f814 	bl	80009c8 <HAL_InitTick>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e002      	b.n	80009b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009aa:	f7ff fe83 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	58024400 	.word	0x58024400
 80009bc:	08002eb8 	.word	0x08002eb8
 80009c0:	24000004 	.word	0x24000004
 80009c4:	24000000 	.word	0x24000000

080009c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_InitTick+0x60>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d101      	bne.n	80009dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e021      	b.n	8000a20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_InitTick+0x64>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_InitTick+0x60>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f921 	bl	8000c3a <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a10:	f000 f8f9 	bl	8000c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_InitTick+0x68>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2400000c 	.word	0x2400000c
 8000a2c:	24000000 	.word	0x24000000
 8000a30:	24000008 	.word	0x24000008

08000a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	2400000c 	.word	0x2400000c
 8000a58:	24000078 	.word	0x24000078

08000a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	24000078 	.word	0x24000078

08000a74 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <HAL_GetREVID+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	0c1b      	lsrs	r3, r3, #16
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	5c001000 	.word	0x5c001000

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <__NVIC_SetPriorityGrouping+0x40>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <__NVIC_SetPriorityGrouping+0x40>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	05fa0000 	.word	0x05fa0000

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f7ff ff8e 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff47 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c14:	f7ff ff5e 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f7ff ff90 	bl	8000b44 <NVIC_EncodePriority>
 8000c24:	4602      	mov	r2, r0
 8000c26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff5f 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffb2 	bl	8000bac <SysTick_Config>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c62:	4b89      	ldr	r3, [pc, #548]	; (8000e88 <HAL_GPIO_Init+0x234>)
 8000c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c66:	e194      	b.n	8000f92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 8186 	beq.w	8000f8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d005      	beq.n	8000c98 <HAL_GPIO_Init+0x44>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d130      	bne.n	8000cfa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cce:	2201      	movs	r2, #1
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	091b      	lsrs	r3, r3, #4
 8000ce4:	f003 0201 	and.w	r2, r3, #1
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d017      	beq.n	8000d36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	2203      	movs	r2, #3
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d123      	bne.n	8000d8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	220f      	movs	r2, #15
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	691a      	ldr	r2, [r3, #16]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	08da      	lsrs	r2, r3, #3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3208      	adds	r2, #8
 8000d84:	69b9      	ldr	r1, [r7, #24]
 8000d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0203 	and.w	r2, r3, #3
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 80e0 	beq.w	8000f8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <HAL_GPIO_Init+0x238>)
 8000dce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd2:	4a2e      	ldr	r2, [pc, #184]	; (8000e8c <HAL_GPIO_Init+0x238>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <HAL_GPIO_Init+0x238>)
 8000dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <HAL_GPIO_Init+0x23c>)
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	3302      	adds	r3, #2
 8000df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	220f      	movs	r2, #15
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a20      	ldr	r2, [pc, #128]	; (8000e94 <HAL_GPIO_Init+0x240>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d052      	beq.n	8000ebc <HAL_GPIO_Init+0x268>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <HAL_GPIO_Init+0x244>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d031      	beq.n	8000e82 <HAL_GPIO_Init+0x22e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <HAL_GPIO_Init+0x248>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d02b      	beq.n	8000e7e <HAL_GPIO_Init+0x22a>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a1d      	ldr	r2, [pc, #116]	; (8000ea0 <HAL_GPIO_Init+0x24c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d025      	beq.n	8000e7a <HAL_GPIO_Init+0x226>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <HAL_GPIO_Init+0x250>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d01f      	beq.n	8000e76 <HAL_GPIO_Init+0x222>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <HAL_GPIO_Init+0x254>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d019      	beq.n	8000e72 <HAL_GPIO_Init+0x21e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a1a      	ldr	r2, [pc, #104]	; (8000eac <HAL_GPIO_Init+0x258>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d013      	beq.n	8000e6e <HAL_GPIO_Init+0x21a>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <HAL_GPIO_Init+0x25c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d00d      	beq.n	8000e6a <HAL_GPIO_Init+0x216>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a18      	ldr	r2, [pc, #96]	; (8000eb4 <HAL_GPIO_Init+0x260>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d007      	beq.n	8000e66 <HAL_GPIO_Init+0x212>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_GPIO_Init+0x264>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d101      	bne.n	8000e62 <HAL_GPIO_Init+0x20e>
 8000e5e:	2309      	movs	r3, #9
 8000e60:	e02d      	b.n	8000ebe <HAL_GPIO_Init+0x26a>
 8000e62:	230a      	movs	r3, #10
 8000e64:	e02b      	b.n	8000ebe <HAL_GPIO_Init+0x26a>
 8000e66:	2308      	movs	r3, #8
 8000e68:	e029      	b.n	8000ebe <HAL_GPIO_Init+0x26a>
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	e027      	b.n	8000ebe <HAL_GPIO_Init+0x26a>
 8000e6e:	2306      	movs	r3, #6
 8000e70:	e025      	b.n	8000ebe <HAL_GPIO_Init+0x26a>
 8000e72:	2305      	movs	r3, #5
 8000e74:	e023      	b.n	8000ebe <HAL_GPIO_Init+0x26a>
 8000e76:	2304      	movs	r3, #4
 8000e78:	e021      	b.n	8000ebe <HAL_GPIO_Init+0x26a>
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e01f      	b.n	8000ebe <HAL_GPIO_Init+0x26a>
 8000e7e:	2302      	movs	r3, #2
 8000e80:	e01d      	b.n	8000ebe <HAL_GPIO_Init+0x26a>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e01b      	b.n	8000ebe <HAL_GPIO_Init+0x26a>
 8000e86:	bf00      	nop
 8000e88:	58000080 	.word	0x58000080
 8000e8c:	58024400 	.word	0x58024400
 8000e90:	58000400 	.word	0x58000400
 8000e94:	58020000 	.word	0x58020000
 8000e98:	58020400 	.word	0x58020400
 8000e9c:	58020800 	.word	0x58020800
 8000ea0:	58020c00 	.word	0x58020c00
 8000ea4:	58021000 	.word	0x58021000
 8000ea8:	58021400 	.word	0x58021400
 8000eac:	58021800 	.word	0x58021800
 8000eb0:	58021c00 	.word	0x58021c00
 8000eb4:	58022000 	.word	0x58022000
 8000eb8:	58022400 	.word	0x58022400
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	69fa      	ldr	r2, [r7, #28]
 8000ec0:	f002 0203 	and.w	r2, r2, #3
 8000ec4:	0092      	lsls	r2, r2, #2
 8000ec6:	4093      	lsls	r3, r2
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ece:	4938      	ldr	r1, [pc, #224]	; (8000fb0 <HAL_GPIO_Init+0x35c>)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f47f ae63 	bne.w	8000c68 <HAL_GPIO_Init+0x14>
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
 8000fa6:	3724      	adds	r7, #36	; 0x24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	58000400 	.word	0x58000400

08000fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc4:	787b      	ldrb	r3, [r7, #1]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000fd0:	e003      	b.n	8000fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	041a      	lsls	r2, r3, #16
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	619a      	str	r2, [r3, #24]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_PWREx_ConfigSupply+0x70>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d00a      	beq.n	8001012 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_PWREx_ConfigSupply+0x70>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	d001      	beq.n	800100e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e01f      	b.n	800104e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e01d      	b.n	800104e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_PWREx_ConfigSupply+0x70>)
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	f023 0207 	bic.w	r2, r3, #7
 800101a:	490f      	ldr	r1, [pc, #60]	; (8001058 <HAL_PWREx_ConfigSupply+0x70>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4313      	orrs	r3, r2
 8001020:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001022:	f7ff fd1b 	bl	8000a5c <HAL_GetTick>
 8001026:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001028:	e009      	b.n	800103e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800102a:	f7ff fd17 	bl	8000a5c <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001038:	d901      	bls.n	800103e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e007      	b.n	800104e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_PWREx_ConfigSupply+0x70>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800104a:	d1ee      	bne.n	800102a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	58024800 	.word	0x58024800

0800105c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	f000 bc48 	b.w	8001900 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 8088 	beq.w	800118e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800107e:	4b99      	ldr	r3, [pc, #612]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001088:	4b96      	ldr	r3, [pc, #600]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 800108a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001090:	2b10      	cmp	r3, #16
 8001092:	d007      	beq.n	80010a4 <HAL_RCC_OscConfig+0x48>
 8001094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001096:	2b18      	cmp	r3, #24
 8001098:	d111      	bne.n	80010be <HAL_RCC_OscConfig+0x62>
 800109a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d10c      	bne.n	80010be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a4:	4b8f      	ldr	r3, [pc, #572]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d06d      	beq.n	800118c <HAL_RCC_OscConfig+0x130>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d169      	bne.n	800118c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	f000 bc21 	b.w	8001900 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c6:	d106      	bne.n	80010d6 <HAL_RCC_OscConfig+0x7a>
 80010c8:	4b86      	ldr	r3, [pc, #536]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a85      	ldr	r2, [pc, #532]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80010ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e02e      	b.n	8001134 <HAL_RCC_OscConfig+0xd8>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x9c>
 80010de:	4b81      	ldr	r3, [pc, #516]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a80      	ldr	r2, [pc, #512]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80010e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b7e      	ldr	r3, [pc, #504]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a7d      	ldr	r2, [pc, #500]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80010f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e01d      	b.n	8001134 <HAL_RCC_OscConfig+0xd8>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0xc0>
 8001102:	4b78      	ldr	r3, [pc, #480]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a77      	ldr	r2, [pc, #476]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 8001108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b75      	ldr	r3, [pc, #468]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a74      	ldr	r2, [pc, #464]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 8001114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e00b      	b.n	8001134 <HAL_RCC_OscConfig+0xd8>
 800111c:	4b71      	ldr	r3, [pc, #452]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a70      	ldr	r2, [pc, #448]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 8001122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b6e      	ldr	r3, [pc, #440]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a6d      	ldr	r2, [pc, #436]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 800112e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d013      	beq.n	8001164 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113c:	f7ff fc8e 	bl	8000a5c <HAL_GetTick>
 8001140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fc8a 	bl	8000a5c <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e3d4      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001156:	4b63      	ldr	r3, [pc, #396]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0xe8>
 8001162:	e014      	b.n	800118e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001164:	f7ff fc7a 	bl	8000a5c <HAL_GetTick>
 8001168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fc76 	bl	8000a5c <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e3c0      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800117e:	4b59      	ldr	r3, [pc, #356]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x110>
 800118a:	e000      	b.n	800118e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 80ca 	beq.w	8001330 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800119c:	4b51      	ldr	r3, [pc, #324]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011a6:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <HAL_RCC_OscConfig+0x166>
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	2b18      	cmp	r3, #24
 80011b6:	d156      	bne.n	8001266 <HAL_RCC_OscConfig+0x20a>
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d151      	bne.n	8001266 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c2:	4b48      	ldr	r3, [pc, #288]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HAL_RCC_OscConfig+0x17e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e392      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011da:	4b42      	ldr	r3, [pc, #264]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 0219 	bic.w	r2, r3, #25
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	493f      	ldr	r1, [pc, #252]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ec:	f7ff fc36 	bl	8000a5c <HAL_GetTick>
 80011f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f4:	f7ff fc32 	bl	8000a5c <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e37c      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001206:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	f7ff fc2f 	bl	8000a74 <HAL_GetREVID>
 8001216:	4603      	mov	r3, r0
 8001218:	f241 0203 	movw	r2, #4099	; 0x1003
 800121c:	4293      	cmp	r3, r2
 800121e:	d817      	bhi.n	8001250 <HAL_RCC_OscConfig+0x1f4>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	2b40      	cmp	r3, #64	; 0x40
 8001226:	d108      	bne.n	800123a <HAL_RCC_OscConfig+0x1de>
 8001228:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001230:	4a2c      	ldr	r2, [pc, #176]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 8001232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001236:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001238:	e07a      	b.n	8001330 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	031b      	lsls	r3, r3, #12
 8001248:	4926      	ldr	r1, [pc, #152]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800124e:	e06f      	b.n	8001330 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	061b      	lsls	r3, r3, #24
 800125e:	4921      	ldr	r1, [pc, #132]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 8001260:	4313      	orrs	r3, r2
 8001262:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001264:	e064      	b.n	8001330 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d047      	beq.n	80012fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f023 0219 	bic.w	r2, r3, #25
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	491a      	ldr	r1, [pc, #104]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 800127c:	4313      	orrs	r3, r2
 800127e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff fbec 	bl	8000a5c <HAL_GetTick>
 8001284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001288:	f7ff fbe8 	bl	8000a5c <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e332      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a6:	f7ff fbe5 	bl	8000a74 <HAL_GetREVID>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d819      	bhi.n	80012e8 <HAL_RCC_OscConfig+0x28c>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	2b40      	cmp	r3, #64	; 0x40
 80012ba:	d108      	bne.n	80012ce <HAL_RCC_OscConfig+0x272>
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80012c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ca:	6053      	str	r3, [r2, #4]
 80012cc:	e030      	b.n	8001330 <HAL_RCC_OscConfig+0x2d4>
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	031b      	lsls	r3, r3, #12
 80012dc:	4901      	ldr	r1, [pc, #4]	; (80012e4 <HAL_RCC_OscConfig+0x288>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
 80012e2:	e025      	b.n	8001330 <HAL_RCC_OscConfig+0x2d4>
 80012e4:	58024400 	.word	0x58024400
 80012e8:	4b9a      	ldr	r3, [pc, #616]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	061b      	lsls	r3, r3, #24
 80012f6:	4997      	ldr	r1, [pc, #604]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
 80012fc:	e018      	b.n	8001330 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fe:	4b95      	ldr	r3, [pc, #596]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a94      	ldr	r2, [pc, #592]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130a:	f7ff fba7 	bl	8000a5c <HAL_GetTick>
 800130e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fba3 	bl	8000a5c <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e2ed      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001324:	4b8b      	ldr	r3, [pc, #556]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0310 	and.w	r3, r3, #16
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80a9 	beq.w	8001490 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133e:	4b85      	ldr	r3, [pc, #532]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001346:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001348:	4b82      	ldr	r3, [pc, #520]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 800134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	2b08      	cmp	r3, #8
 8001352:	d007      	beq.n	8001364 <HAL_RCC_OscConfig+0x308>
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	2b18      	cmp	r3, #24
 8001358:	d13a      	bne.n	80013d0 <HAL_RCC_OscConfig+0x374>
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d135      	bne.n	80013d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001364:	4b7b      	ldr	r3, [pc, #492]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_OscConfig+0x320>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	2b80      	cmp	r3, #128	; 0x80
 8001376:	d001      	beq.n	800137c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e2c1      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800137c:	f7ff fb7a 	bl	8000a74 <HAL_GetREVID>
 8001380:	4603      	mov	r3, r0
 8001382:	f241 0203 	movw	r2, #4099	; 0x1003
 8001386:	4293      	cmp	r3, r2
 8001388:	d817      	bhi.n	80013ba <HAL_RCC_OscConfig+0x35e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	2b20      	cmp	r3, #32
 8001390:	d108      	bne.n	80013a4 <HAL_RCC_OscConfig+0x348>
 8001392:	4b70      	ldr	r3, [pc, #448]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800139a:	4a6e      	ldr	r2, [pc, #440]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 800139c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013a2:	e075      	b.n	8001490 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013a4:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	069b      	lsls	r3, r3, #26
 80013b2:	4968      	ldr	r1, [pc, #416]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013b8:	e06a      	b.n	8001490 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013ba:	4b66      	ldr	r3, [pc, #408]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	061b      	lsls	r3, r3, #24
 80013c8:	4962      	ldr	r1, [pc, #392]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013ce:	e05f      	b.n	8001490 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d042      	beq.n	800145e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013d8:	4b5e      	ldr	r3, [pc, #376]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a5d      	ldr	r2, [pc, #372]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 80013de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff fb3a 	bl	8000a5c <HAL_GetTick>
 80013e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80013ec:	f7ff fb36 	bl	8000a5c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e280      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013fe:	4b55      	ldr	r3, [pc, #340]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800140a:	f7ff fb33 	bl	8000a74 <HAL_GetREVID>
 800140e:	4603      	mov	r3, r0
 8001410:	f241 0203 	movw	r2, #4099	; 0x1003
 8001414:	4293      	cmp	r3, r2
 8001416:	d817      	bhi.n	8001448 <HAL_RCC_OscConfig+0x3ec>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	2b20      	cmp	r3, #32
 800141e:	d108      	bne.n	8001432 <HAL_RCC_OscConfig+0x3d6>
 8001420:	4b4c      	ldr	r3, [pc, #304]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001428:	4a4a      	ldr	r2, [pc, #296]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 800142a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800142e:	6053      	str	r3, [r2, #4]
 8001430:	e02e      	b.n	8001490 <HAL_RCC_OscConfig+0x434>
 8001432:	4b48      	ldr	r3, [pc, #288]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	069b      	lsls	r3, r3, #26
 8001440:	4944      	ldr	r1, [pc, #272]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001442:	4313      	orrs	r3, r2
 8001444:	604b      	str	r3, [r1, #4]
 8001446:	e023      	b.n	8001490 <HAL_RCC_OscConfig+0x434>
 8001448:	4b42      	ldr	r3, [pc, #264]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	061b      	lsls	r3, r3, #24
 8001456:	493f      	ldr	r1, [pc, #252]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001458:	4313      	orrs	r3, r2
 800145a:	60cb      	str	r3, [r1, #12]
 800145c:	e018      	b.n	8001490 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a3c      	ldr	r2, [pc, #240]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146a:	f7ff faf7 	bl	8000a5c <HAL_GetTick>
 800146e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001472:	f7ff faf3 	bl	8000a5c <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e23d      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001484:	4b33      	ldr	r3, [pc, #204]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	d036      	beq.n	800150a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d019      	beq.n	80014d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 80014a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a8:	4a2a      	ldr	r2, [pc, #168]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fad4 	bl	8000a5c <HAL_GetTick>
 80014b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fad0 	bl	8000a5c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e21a      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014ca:	4b22      	ldr	r3, [pc, #136]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 80014cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x45c>
 80014d6:	e018      	b.n	800150a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 80014da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff faba 	bl	8000a5c <HAL_GetTick>
 80014e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ec:	f7ff fab6 	bl	8000a5c <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e200      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	2b00      	cmp	r3, #0
 8001514:	d039      	beq.n	800158a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d01c      	beq.n	8001558 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a0c      	ldr	r2, [pc, #48]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001528:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800152a:	f7ff fa97 	bl	8000a5c <HAL_GetTick>
 800152e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001532:	f7ff fa93 	bl	8000a5c <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e1dd      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_RCC_OscConfig+0x4f8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x4d6>
 8001550:	e01b      	b.n	800158a <HAL_RCC_OscConfig+0x52e>
 8001552:	bf00      	nop
 8001554:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001558:	4b9b      	ldr	r3, [pc, #620]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a9a      	ldr	r2, [pc, #616]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 800155e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001562:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001564:	f7ff fa7a 	bl	8000a5c <HAL_GetTick>
 8001568:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800156c:	f7ff fa76 	bl	8000a5c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e1c0      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800157e:	4b92      	ldr	r3, [pc, #584]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 8081 	beq.w	800169a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001598:	4b8c      	ldr	r3, [pc, #560]	; (80017cc <HAL_RCC_OscConfig+0x770>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a8b      	ldr	r2, [pc, #556]	; (80017cc <HAL_RCC_OscConfig+0x770>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80015a4:	f7ff fa5a 	bl	8000a5c <HAL_GetTick>
 80015a8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ac:	f7ff fa56 	bl	8000a5c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1a0      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015be:	4b83      	ldr	r3, [pc, #524]	; (80017cc <HAL_RCC_OscConfig+0x770>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d106      	bne.n	80015e0 <HAL_RCC_OscConfig+0x584>
 80015d2:	4b7d      	ldr	r3, [pc, #500]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	4a7c      	ldr	r2, [pc, #496]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6713      	str	r3, [r2, #112]	; 0x70
 80015de:	e02d      	b.n	800163c <HAL_RCC_OscConfig+0x5e0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10c      	bne.n	8001602 <HAL_RCC_OscConfig+0x5a6>
 80015e8:	4b77      	ldr	r3, [pc, #476]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	4a76      	ldr	r2, [pc, #472]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	6713      	str	r3, [r2, #112]	; 0x70
 80015f4:	4b74      	ldr	r3, [pc, #464]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	4a73      	ldr	r2, [pc, #460]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80015fa:	f023 0304 	bic.w	r3, r3, #4
 80015fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001600:	e01c      	b.n	800163c <HAL_RCC_OscConfig+0x5e0>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b05      	cmp	r3, #5
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x5c8>
 800160a:	4b6f      	ldr	r3, [pc, #444]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160e:	4a6e      	ldr	r2, [pc, #440]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6713      	str	r3, [r2, #112]	; 0x70
 8001616:	4b6c      	ldr	r3, [pc, #432]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161a:	4a6b      	ldr	r2, [pc, #428]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6713      	str	r3, [r2, #112]	; 0x70
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0x5e0>
 8001624:	4b68      	ldr	r3, [pc, #416]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001628:	4a67      	ldr	r2, [pc, #412]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	6713      	str	r3, [r2, #112]	; 0x70
 8001630:	4b65      	ldr	r3, [pc, #404]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001634:	4a64      	ldr	r2, [pc, #400]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001636:	f023 0304 	bic.w	r3, r3, #4
 800163a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d015      	beq.n	8001670 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff fa0a 	bl	8000a5c <HAL_GetTick>
 8001648:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7ff fa06 	bl	8000a5c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e14e      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001662:	4b59      	ldr	r3, [pc, #356]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0ee      	beq.n	800164c <HAL_RCC_OscConfig+0x5f0>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff f9f4 	bl	8000a5c <HAL_GetTick>
 8001674:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001676:	e00a      	b.n	800168e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff f9f0 	bl	8000a5c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	; 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e138      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800168e:	4b4e      	ldr	r3, [pc, #312]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ee      	bne.n	8001678 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 812d 	beq.w	80018fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80016a4:	4b48      	ldr	r3, [pc, #288]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016ac:	2b18      	cmp	r3, #24
 80016ae:	f000 80bd 	beq.w	800182c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	f040 809e 	bne.w	80017f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016bc:	4b42      	ldr	r3, [pc, #264]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a41      	ldr	r2, [pc, #260]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80016c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff f9c8 	bl	8000a5c <HAL_GetTick>
 80016cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff f9c4 	bl	8000a5c <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e10e      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016e2:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ee:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80016f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_RCC_OscConfig+0x774>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	430a      	orrs	r2, r1
 8001702:	4931      	ldr	r1, [pc, #196]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001704:	4313      	orrs	r3, r2
 8001706:	628b      	str	r3, [r1, #40]	; 0x28
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	3b01      	subs	r3, #1
 800170e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001716:	3b01      	subs	r3, #1
 8001718:	025b      	lsls	r3, r3, #9
 800171a:	b29b      	uxth	r3, r3
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001722:	3b01      	subs	r3, #1
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001730:	3b01      	subs	r3, #1
 8001732:	061b      	lsls	r3, r3, #24
 8001734:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001738:	4923      	ldr	r1, [pc, #140]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 800173a:	4313      	orrs	r3, r2
 800173c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 800174c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <HAL_RCC_OscConfig+0x778>)
 8001750:	4013      	ands	r3, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001756:	00d2      	lsls	r2, r2, #3
 8001758:	491b      	ldr	r1, [pc, #108]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 800175a:	4313      	orrs	r3, r2
 800175c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	f023 020c 	bic.w	r2, r3, #12
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4917      	ldr	r1, [pc, #92]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 800176c:	4313      	orrs	r3, r2
 800176e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	f023 0202 	bic.w	r2, r3, #2
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177c:	4912      	ldr	r1, [pc, #72]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 800177e:	4313      	orrs	r3, r2
 8001780:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_RCC_OscConfig+0x76c>)
 80017b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017be:	f7ff f94d 	bl	8000a5c <HAL_GetTick>
 80017c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017c4:	e011      	b.n	80017ea <HAL_RCC_OscConfig+0x78e>
 80017c6:	bf00      	nop
 80017c8:	58024400 	.word	0x58024400
 80017cc:	58024800 	.word	0x58024800
 80017d0:	fffffc0c 	.word	0xfffffc0c
 80017d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d8:	f7ff f940 	bl	8000a5c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e08a      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_RCC_OscConfig+0x8ac>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x77c>
 80017f6:	e082      	b.n	80018fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f8:	4b43      	ldr	r3, [pc, #268]	; (8001908 <HAL_RCC_OscConfig+0x8ac>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a42      	ldr	r2, [pc, #264]	; (8001908 <HAL_RCC_OscConfig+0x8ac>)
 80017fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff f92a 	bl	8000a5c <HAL_GetTick>
 8001808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff f926 	bl	8000a5c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e070      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800181e:	4b3a      	ldr	r3, [pc, #232]	; (8001908 <HAL_RCC_OscConfig+0x8ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x7b0>
 800182a:	e068      	b.n	80018fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800182c:	4b36      	ldr	r3, [pc, #216]	; (8001908 <HAL_RCC_OscConfig+0x8ac>)
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <HAL_RCC_OscConfig+0x8ac>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	2b01      	cmp	r3, #1
 800183e:	d031      	beq.n	80018a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f003 0203 	and.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d12a      	bne.n	80018a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d122      	bne.n	80018a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800186a:	429a      	cmp	r2, r3
 800186c:	d11a      	bne.n	80018a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	0a5b      	lsrs	r3, r3, #9
 8001872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d111      	bne.n	80018a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	0c1b      	lsrs	r3, r3, #16
 8001884:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d108      	bne.n	80018a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	0e1b      	lsrs	r3, r3, #24
 8001896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e02b      	b.n	8001900 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_RCC_OscConfig+0x8ac>)
 80018aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d01f      	beq.n	80018fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_RCC_OscConfig+0x8ac>)
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_RCC_OscConfig+0x8ac>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018ca:	f7ff f8c7 	bl	8000a5c <HAL_GetTick>
 80018ce:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80018d0:	bf00      	nop
 80018d2:	f7ff f8c3 	bl	8000a5c <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	4293      	cmp	r3, r2
 80018dc:	d0f9      	beq.n	80018d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_RCC_OscConfig+0x8ac>)
 80018e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_RCC_OscConfig+0x8b0>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018ea:	00d2      	lsls	r2, r2, #3
 80018ec:	4906      	ldr	r1, [pc, #24]	; (8001908 <HAL_RCC_OscConfig+0x8ac>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_OscConfig+0x8ac>)
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_RCC_OscConfig+0x8ac>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3730      	adds	r7, #48	; 0x30
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	58024400 	.word	0x58024400
 800190c:	ffff0007 	.word	0xffff0007

08001910 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e19c      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b8a      	ldr	r3, [pc, #552]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d910      	bls.n	8001954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b87      	ldr	r3, [pc, #540]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 020f 	bic.w	r2, r3, #15
 800193a:	4985      	ldr	r1, [pc, #532]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b83      	ldr	r3, [pc, #524]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e184      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d010      	beq.n	8001982 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	4b7b      	ldr	r3, [pc, #492]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800196c:	429a      	cmp	r2, r3
 800196e:	d908      	bls.n	8001982 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001970:	4b78      	ldr	r3, [pc, #480]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	4975      	ldr	r1, [pc, #468]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 800197e:	4313      	orrs	r3, r2
 8001980:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d010      	beq.n	80019b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	4b70      	ldr	r3, [pc, #448]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800199a:	429a      	cmp	r2, r3
 800199c:	d908      	bls.n	80019b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800199e:	4b6d      	ldr	r3, [pc, #436]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	496a      	ldr	r1, [pc, #424]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d010      	beq.n	80019de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699a      	ldr	r2, [r3, #24]
 80019c0:	4b64      	ldr	r3, [pc, #400]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d908      	bls.n	80019de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019cc:	4b61      	ldr	r3, [pc, #388]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	495e      	ldr	r1, [pc, #376]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d010      	beq.n	8001a0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	4b59      	ldr	r3, [pc, #356]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d908      	bls.n	8001a0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80019fa:	4b56      	ldr	r3, [pc, #344]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4953      	ldr	r1, [pc, #332]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d010      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	4b4d      	ldr	r3, [pc, #308]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d908      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f023 020f 	bic.w	r2, r3, #15
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4947      	ldr	r1, [pc, #284]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d055      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a46:	4b43      	ldr	r3, [pc, #268]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4940      	ldr	r1, [pc, #256]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a60:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d121      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0f6      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a78:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d115      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0ea      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a90:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0de      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0d6      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	f023 0207 	bic.w	r2, r3, #7
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4925      	ldr	r1, [pc, #148]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac2:	f7fe ffcb 	bl	8000a5c <HAL_GetTick>
 8001ac6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aca:	f7fe ffc7 	bl	8000a5c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e0be      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d1eb      	bne.n	8001aca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d010      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d208      	bcs.n	8001b20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f023 020f 	bic.w	r2, r3, #15
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	490e      	ldr	r1, [pc, #56]	; (8001b54 <HAL_RCC_ClockConfig+0x244>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d214      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 020f 	bic.w	r2, r3, #15
 8001b36:	4906      	ldr	r1, [pc, #24]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <HAL_RCC_ClockConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e086      	b.n	8001c5e <HAL_RCC_ClockConfig+0x34e>
 8001b50:	52002000 	.word	0x52002000
 8001b54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d010      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d208      	bcs.n	8001b86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b74:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	4939      	ldr	r1, [pc, #228]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d010      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d208      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ba2:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	492e      	ldr	r1, [pc, #184]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d010      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699a      	ldr	r2, [r3, #24]
 8001bc4:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d208      	bcs.n	8001be2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bd0:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4922      	ldr	r1, [pc, #136]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d010      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d208      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4917      	ldr	r1, [pc, #92]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c10:	f000 f834 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	4912      	ldr	r1, [pc, #72]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_RCC_ClockConfig+0x358>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	4a0d      	ldr	r2, [pc, #52]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001c38:	5cd3      	ldrb	r3, [r2, r3]
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <HAL_RCC_ClockConfig+0x360>)
 8001c46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_RCC_ClockConfig+0x364>)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_ClockConfig+0x368>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe feb8 	bl	80009c8 <HAL_InitTick>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	58024400 	.word	0x58024400
 8001c6c:	08002eb8 	.word	0x08002eb8
 8001c70:	24000004 	.word	0x24000004
 8001c74:	24000000 	.word	0x24000000
 8001c78:	24000008 	.word	0x24000008

08001c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c82:	4bb3      	ldr	r3, [pc, #716]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c8a:	2b18      	cmp	r3, #24
 8001c8c:	f200 8155 	bhi.w	8001f3a <HAL_RCC_GetSysClockFreq+0x2be>
 8001c90:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c96:	bf00      	nop
 8001c98:	08001cfd 	.word	0x08001cfd
 8001c9c:	08001f3b 	.word	0x08001f3b
 8001ca0:	08001f3b 	.word	0x08001f3b
 8001ca4:	08001f3b 	.word	0x08001f3b
 8001ca8:	08001f3b 	.word	0x08001f3b
 8001cac:	08001f3b 	.word	0x08001f3b
 8001cb0:	08001f3b 	.word	0x08001f3b
 8001cb4:	08001f3b 	.word	0x08001f3b
 8001cb8:	08001d23 	.word	0x08001d23
 8001cbc:	08001f3b 	.word	0x08001f3b
 8001cc0:	08001f3b 	.word	0x08001f3b
 8001cc4:	08001f3b 	.word	0x08001f3b
 8001cc8:	08001f3b 	.word	0x08001f3b
 8001ccc:	08001f3b 	.word	0x08001f3b
 8001cd0:	08001f3b 	.word	0x08001f3b
 8001cd4:	08001f3b 	.word	0x08001f3b
 8001cd8:	08001d29 	.word	0x08001d29
 8001cdc:	08001f3b 	.word	0x08001f3b
 8001ce0:	08001f3b 	.word	0x08001f3b
 8001ce4:	08001f3b 	.word	0x08001f3b
 8001ce8:	08001f3b 	.word	0x08001f3b
 8001cec:	08001f3b 	.word	0x08001f3b
 8001cf0:	08001f3b 	.word	0x08001f3b
 8001cf4:	08001f3b 	.word	0x08001f3b
 8001cf8:	08001d2f 	.word	0x08001d2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001cfc:	4b94      	ldr	r3, [pc, #592]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0320 	and.w	r3, r3, #32
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d009      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d08:	4b91      	ldr	r3, [pc, #580]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	4a90      	ldr	r2, [pc, #576]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001d1a:	e111      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d1c:	4b8d      	ldr	r3, [pc, #564]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d1e:	61bb      	str	r3, [r7, #24]
      break;
 8001d20:	e10e      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001d22:	4b8d      	ldr	r3, [pc, #564]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d24:	61bb      	str	r3, [r7, #24]
      break;
 8001d26:	e10b      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d2a:	61bb      	str	r3, [r7, #24]
      break;
 8001d2c:	e108      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d2e:	4b88      	ldr	r3, [pc, #544]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001d38:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d44:	4b82      	ldr	r3, [pc, #520]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001d4e:	4b80      	ldr	r3, [pc, #512]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d52:	08db      	lsrs	r3, r3, #3
 8001d54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80e1 	beq.w	8001f34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	f000 8083 	beq.w	8001e80 <HAL_RCC_GetSysClockFreq+0x204>
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	f200 80a1 	bhi.w	8001ec4 <HAL_RCC_GetSysClockFreq+0x248>
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x114>
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d056      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001d8e:	e099      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d90:	4b6f      	ldr	r3, [pc, #444]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d02d      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d9c:	4b6c      	ldr	r3, [pc, #432]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	08db      	lsrs	r3, r3, #3
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	4a6b      	ldr	r2, [pc, #428]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	ee07 3a90 	vmov	s15, r3
 8001db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dc6:	4b62      	ldr	r3, [pc, #392]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dce:	ee07 3a90 	vmov	s15, r3
 8001dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dda:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001df6:	e087      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e02:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001f64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e0a:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e3a:	e065      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e46:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001f68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e4e:	4b40      	ldr	r3, [pc, #256]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e7e:	e043      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001f6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e92:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ea6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ec2:	e021      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ece:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001f68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	0a5b      	lsrs	r3, r3, #9
 8001f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f12:	3301      	adds	r3, #1
 8001f14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	ee07 3a90 	vmov	s15, r3
 8001f1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f2c:	ee17 3a90 	vmov	r3, s15
 8001f30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001f32:	e005      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
      break;
 8001f38:	e002      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f3c:	61bb      	str	r3, [r7, #24]
      break;
 8001f3e:	bf00      	nop
  }

  return sysclockfreq;
 8001f40:	69bb      	ldr	r3, [r7, #24]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	58024400 	.word	0x58024400
 8001f54:	03d09000 	.word	0x03d09000
 8001f58:	003d0900 	.word	0x003d0900
 8001f5c:	007a1200 	.word	0x007a1200
 8001f60:	46000000 	.word	0x46000000
 8001f64:	4c742400 	.word	0x4c742400
 8001f68:	4a742400 	.word	0x4a742400
 8001f6c:	4af42400 	.word	0x4af42400

08001f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e049      	b.n	8002016 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe fba6 	bl	80006e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3304      	adds	r3, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f000 faa2 	bl	80024f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e049      	b.n	80020c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f841 	bl	80020cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	4619      	mov	r1, r3
 800205c:	4610      	mov	r0, r2
 800205e:	f000 fa4b 	bl	80024f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e0ff      	b.n	80022fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b14      	cmp	r3, #20
 800210a:	f200 80f0 	bhi.w	80022ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800210e:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002114:	08002169 	.word	0x08002169
 8002118:	080022ef 	.word	0x080022ef
 800211c:	080022ef 	.word	0x080022ef
 8002120:	080022ef 	.word	0x080022ef
 8002124:	080021a9 	.word	0x080021a9
 8002128:	080022ef 	.word	0x080022ef
 800212c:	080022ef 	.word	0x080022ef
 8002130:	080022ef 	.word	0x080022ef
 8002134:	080021eb 	.word	0x080021eb
 8002138:	080022ef 	.word	0x080022ef
 800213c:	080022ef 	.word	0x080022ef
 8002140:	080022ef 	.word	0x080022ef
 8002144:	0800222b 	.word	0x0800222b
 8002148:	080022ef 	.word	0x080022ef
 800214c:	080022ef 	.word	0x080022ef
 8002150:	080022ef 	.word	0x080022ef
 8002154:	0800226d 	.word	0x0800226d
 8002158:	080022ef 	.word	0x080022ef
 800215c:	080022ef 	.word	0x080022ef
 8002160:	080022ef 	.word	0x080022ef
 8002164:	080022ad 	.word	0x080022ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	4618      	mov	r0, r3
 8002170:	f000 fa68 	bl	8002644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0208 	orr.w	r2, r2, #8
 8002182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0204 	bic.w	r2, r2, #4
 8002192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6999      	ldr	r1, [r3, #24]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	619a      	str	r2, [r3, #24]
      break;
 80021a6:	e0a5      	b.n	80022f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fad8 	bl	8002764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6999      	ldr	r1, [r3, #24]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	021a      	lsls	r2, r3, #8
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	619a      	str	r2, [r3, #24]
      break;
 80021e8:	e084      	b.n	80022f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68b9      	ldr	r1, [r7, #8]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fb41 	bl	8002878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	69da      	ldr	r2, [r3, #28]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0208 	orr.w	r2, r2, #8
 8002204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69da      	ldr	r2, [r3, #28]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0204 	bic.w	r2, r2, #4
 8002214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69d9      	ldr	r1, [r3, #28]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	61da      	str	r2, [r3, #28]
      break;
 8002228:	e064      	b.n	80022f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fba9 	bl	8002988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69da      	ldr	r2, [r3, #28]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	69da      	ldr	r2, [r3, #28]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69d9      	ldr	r1, [r3, #28]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	021a      	lsls	r2, r3, #8
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	61da      	str	r2, [r3, #28]
      break;
 800226a:	e043      	b.n	80022f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fbf2 	bl	8002a5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0208 	orr.w	r2, r2, #8
 8002286:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0204 	bic.w	r2, r2, #4
 8002296:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80022aa:	e023      	b.n	80022f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fc36 	bl	8002b24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	021a      	lsls	r2, r3, #8
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80022ec:	e002      	b.n	80022f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	75fb      	strb	r3, [r7, #23]
      break;
 80022f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop

08002308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_TIM_ConfigClockSource+0x1c>
 8002320:	2302      	movs	r3, #2
 8002322:	e0dc      	b.n	80024de <HAL_TIM_ConfigClockSource+0x1d6>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	4b6a      	ldr	r3, [pc, #424]	; (80024e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8002340:	4013      	ands	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800234a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a64      	ldr	r2, [pc, #400]	; (80024ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	f000 80a9 	beq.w	80024b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002360:	4a62      	ldr	r2, [pc, #392]	; (80024ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	f200 80ae 	bhi.w	80024c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002368:	4a61      	ldr	r2, [pc, #388]	; (80024f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	f000 80a1 	beq.w	80024b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002370:	4a5f      	ldr	r2, [pc, #380]	; (80024f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	f200 80a6 	bhi.w	80024c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002378:	4a5e      	ldr	r2, [pc, #376]	; (80024f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800237a:	4293      	cmp	r3, r2
 800237c:	f000 8099 	beq.w	80024b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002380:	4a5c      	ldr	r2, [pc, #368]	; (80024f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002382:	4293      	cmp	r3, r2
 8002384:	f200 809e 	bhi.w	80024c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002388:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800238c:	f000 8091 	beq.w	80024b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002390:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002394:	f200 8096 	bhi.w	80024c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800239c:	f000 8089 	beq.w	80024b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80023a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a4:	f200 808e 	bhi.w	80024c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ac:	d03e      	beq.n	800242c <HAL_TIM_ConfigClockSource+0x124>
 80023ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b2:	f200 8087 	bhi.w	80024c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ba:	f000 8086 	beq.w	80024ca <HAL_TIM_ConfigClockSource+0x1c2>
 80023be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c2:	d87f      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023c4:	2b70      	cmp	r3, #112	; 0x70
 80023c6:	d01a      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0xf6>
 80023c8:	2b70      	cmp	r3, #112	; 0x70
 80023ca:	d87b      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023cc:	2b60      	cmp	r3, #96	; 0x60
 80023ce:	d050      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x16a>
 80023d0:	2b60      	cmp	r3, #96	; 0x60
 80023d2:	d877      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023d4:	2b50      	cmp	r3, #80	; 0x50
 80023d6:	d03c      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x14a>
 80023d8:	2b50      	cmp	r3, #80	; 0x50
 80023da:	d873      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	d058      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x18a>
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d86f      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023e4:	2b30      	cmp	r3, #48	; 0x30
 80023e6:	d064      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80023e8:	2b30      	cmp	r3, #48	; 0x30
 80023ea:	d86b      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d060      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d867      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d05c      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80023f8:	2b10      	cmp	r3, #16
 80023fa:	d05a      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80023fc:	e062      	b.n	80024c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800240e:	f000 fc6d 	bl	8002cec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	609a      	str	r2, [r3, #8]
      break;
 800242a:	e04f      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800243c:	f000 fc56 	bl	8002cec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800244e:	609a      	str	r2, [r3, #8]
      break;
 8002450:	e03c      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800245e:	461a      	mov	r2, r3
 8002460:	f000 fbc6 	bl	8002bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2150      	movs	r1, #80	; 0x50
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fc20 	bl	8002cb0 <TIM_ITRx_SetConfig>
      break;
 8002470:	e02c      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800247e:	461a      	mov	r2, r3
 8002480:	f000 fbe5 	bl	8002c4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2160      	movs	r1, #96	; 0x60
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fc10 	bl	8002cb0 <TIM_ITRx_SetConfig>
      break;
 8002490:	e01c      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800249e:	461a      	mov	r2, r3
 80024a0:	f000 fba6 	bl	8002bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2140      	movs	r1, #64	; 0x40
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fc00 	bl	8002cb0 <TIM_ITRx_SetConfig>
      break;
 80024b0:	e00c      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4619      	mov	r1, r3
 80024bc:	4610      	mov	r0, r2
 80024be:	f000 fbf7 	bl	8002cb0 <TIM_ITRx_SetConfig>
      break;
 80024c2:	e003      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
      break;
 80024c8:	e000      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80024ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	ffceff88 	.word	0xffceff88
 80024ec:	00100040 	.word	0x00100040
 80024f0:	00100030 	.word	0x00100030
 80024f4:	00100020 	.word	0x00100020

080024f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a46      	ldr	r2, [pc, #280]	; (8002624 <TIM_Base_SetConfig+0x12c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d013      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002516:	d00f      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a43      	ldr	r2, [pc, #268]	; (8002628 <TIM_Base_SetConfig+0x130>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00b      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a42      	ldr	r2, [pc, #264]	; (800262c <TIM_Base_SetConfig+0x134>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d007      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a41      	ldr	r2, [pc, #260]	; (8002630 <TIM_Base_SetConfig+0x138>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d003      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a40      	ldr	r2, [pc, #256]	; (8002634 <TIM_Base_SetConfig+0x13c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d108      	bne.n	800254a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800253e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a35      	ldr	r2, [pc, #212]	; (8002624 <TIM_Base_SetConfig+0x12c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d01f      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002558:	d01b      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a32      	ldr	r2, [pc, #200]	; (8002628 <TIM_Base_SetConfig+0x130>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d017      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a31      	ldr	r2, [pc, #196]	; (800262c <TIM_Base_SetConfig+0x134>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a30      	ldr	r2, [pc, #192]	; (8002630 <TIM_Base_SetConfig+0x138>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00f      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a2f      	ldr	r2, [pc, #188]	; (8002634 <TIM_Base_SetConfig+0x13c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00b      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a2e      	ldr	r2, [pc, #184]	; (8002638 <TIM_Base_SetConfig+0x140>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a2d      	ldr	r2, [pc, #180]	; (800263c <TIM_Base_SetConfig+0x144>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d003      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a2c      	ldr	r2, [pc, #176]	; (8002640 <TIM_Base_SetConfig+0x148>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d108      	bne.n	80025a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a16      	ldr	r2, [pc, #88]	; (8002624 <TIM_Base_SetConfig+0x12c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00f      	beq.n	80025f0 <TIM_Base_SetConfig+0xf8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a18      	ldr	r2, [pc, #96]	; (8002634 <TIM_Base_SetConfig+0x13c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00b      	beq.n	80025f0 <TIM_Base_SetConfig+0xf8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a17      	ldr	r2, [pc, #92]	; (8002638 <TIM_Base_SetConfig+0x140>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d007      	beq.n	80025f0 <TIM_Base_SetConfig+0xf8>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a16      	ldr	r2, [pc, #88]	; (800263c <TIM_Base_SetConfig+0x144>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d003      	beq.n	80025f0 <TIM_Base_SetConfig+0xf8>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <TIM_Base_SetConfig+0x148>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d103      	bne.n	80025f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d105      	bne.n	8002616 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f023 0201 	bic.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	611a      	str	r2, [r3, #16]
  }
}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40010000 	.word	0x40010000
 8002628:	40000400 	.word	0x40000400
 800262c:	40000800 	.word	0x40000800
 8002630:	40000c00 	.word	0x40000c00
 8002634:	40010400 	.word	0x40010400
 8002638:	40014000 	.word	0x40014000
 800263c:	40014400 	.word	0x40014400
 8002640:	40014800 	.word	0x40014800

08002644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f023 0201 	bic.w	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4b37      	ldr	r3, [pc, #220]	; (800274c <TIM_OC1_SetConfig+0x108>)
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0303 	bic.w	r3, r3, #3
 800267a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f023 0302 	bic.w	r3, r3, #2
 800268c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a2d      	ldr	r2, [pc, #180]	; (8002750 <TIM_OC1_SetConfig+0x10c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00f      	beq.n	80026c0 <TIM_OC1_SetConfig+0x7c>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a2c      	ldr	r2, [pc, #176]	; (8002754 <TIM_OC1_SetConfig+0x110>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00b      	beq.n	80026c0 <TIM_OC1_SetConfig+0x7c>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a2b      	ldr	r2, [pc, #172]	; (8002758 <TIM_OC1_SetConfig+0x114>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d007      	beq.n	80026c0 <TIM_OC1_SetConfig+0x7c>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a2a      	ldr	r2, [pc, #168]	; (800275c <TIM_OC1_SetConfig+0x118>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d003      	beq.n	80026c0 <TIM_OC1_SetConfig+0x7c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a29      	ldr	r2, [pc, #164]	; (8002760 <TIM_OC1_SetConfig+0x11c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d10c      	bne.n	80026da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f023 0308 	bic.w	r3, r3, #8
 80026c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f023 0304 	bic.w	r3, r3, #4
 80026d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <TIM_OC1_SetConfig+0x10c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00f      	beq.n	8002702 <TIM_OC1_SetConfig+0xbe>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <TIM_OC1_SetConfig+0x110>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00b      	beq.n	8002702 <TIM_OC1_SetConfig+0xbe>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <TIM_OC1_SetConfig+0x114>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d007      	beq.n	8002702 <TIM_OC1_SetConfig+0xbe>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a19      	ldr	r2, [pc, #100]	; (800275c <TIM_OC1_SetConfig+0x118>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d003      	beq.n	8002702 <TIM_OC1_SetConfig+0xbe>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a18      	ldr	r2, [pc, #96]	; (8002760 <TIM_OC1_SetConfig+0x11c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d111      	bne.n	8002726 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	621a      	str	r2, [r3, #32]
}
 8002740:	bf00      	nop
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	fffeff8f 	.word	0xfffeff8f
 8002750:	40010000 	.word	0x40010000
 8002754:	40010400 	.word	0x40010400
 8002758:	40014000 	.word	0x40014000
 800275c:	40014400 	.word	0x40014400
 8002760:	40014800 	.word	0x40014800

08002764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f023 0210 	bic.w	r2, r3, #16
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4b34      	ldr	r3, [pc, #208]	; (8002860 <TIM_OC2_SetConfig+0xfc>)
 8002790:	4013      	ands	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f023 0320 	bic.w	r3, r3, #32
 80027ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a29      	ldr	r2, [pc, #164]	; (8002864 <TIM_OC2_SetConfig+0x100>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d003      	beq.n	80027cc <TIM_OC2_SetConfig+0x68>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a28      	ldr	r2, [pc, #160]	; (8002868 <TIM_OC2_SetConfig+0x104>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d10d      	bne.n	80027e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a1e      	ldr	r2, [pc, #120]	; (8002864 <TIM_OC2_SetConfig+0x100>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00f      	beq.n	8002810 <TIM_OC2_SetConfig+0xac>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <TIM_OC2_SetConfig+0x104>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00b      	beq.n	8002810 <TIM_OC2_SetConfig+0xac>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a1c      	ldr	r2, [pc, #112]	; (800286c <TIM_OC2_SetConfig+0x108>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d007      	beq.n	8002810 <TIM_OC2_SetConfig+0xac>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a1b      	ldr	r2, [pc, #108]	; (8002870 <TIM_OC2_SetConfig+0x10c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d003      	beq.n	8002810 <TIM_OC2_SetConfig+0xac>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <TIM_OC2_SetConfig+0x110>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d113      	bne.n	8002838 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800281e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	621a      	str	r2, [r3, #32]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	feff8fff 	.word	0xfeff8fff
 8002864:	40010000 	.word	0x40010000
 8002868:	40010400 	.word	0x40010400
 800286c:	40014000 	.word	0x40014000
 8002870:	40014400 	.word	0x40014400
 8002874:	40014800 	.word	0x40014800

08002878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4b33      	ldr	r3, [pc, #204]	; (8002970 <TIM_OC3_SetConfig+0xf8>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0303 	bic.w	r3, r3, #3
 80028ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a28      	ldr	r2, [pc, #160]	; (8002974 <TIM_OC3_SetConfig+0xfc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d003      	beq.n	80028de <TIM_OC3_SetConfig+0x66>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a27      	ldr	r2, [pc, #156]	; (8002978 <TIM_OC3_SetConfig+0x100>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d10d      	bne.n	80028fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <TIM_OC3_SetConfig+0xfc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00f      	beq.n	8002922 <TIM_OC3_SetConfig+0xaa>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <TIM_OC3_SetConfig+0x100>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00b      	beq.n	8002922 <TIM_OC3_SetConfig+0xaa>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1b      	ldr	r2, [pc, #108]	; (800297c <TIM_OC3_SetConfig+0x104>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d007      	beq.n	8002922 <TIM_OC3_SetConfig+0xaa>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1a      	ldr	r2, [pc, #104]	; (8002980 <TIM_OC3_SetConfig+0x108>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d003      	beq.n	8002922 <TIM_OC3_SetConfig+0xaa>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a19      	ldr	r2, [pc, #100]	; (8002984 <TIM_OC3_SetConfig+0x10c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d113      	bne.n	800294a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	621a      	str	r2, [r3, #32]
}
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	fffeff8f 	.word	0xfffeff8f
 8002974:	40010000 	.word	0x40010000
 8002978:	40010400 	.word	0x40010400
 800297c:	40014000 	.word	0x40014000
 8002980:	40014400 	.word	0x40014400
 8002984:	40014800 	.word	0x40014800

08002988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <TIM_OC4_SetConfig+0xbc>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	031b      	lsls	r3, r3, #12
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <TIM_OC4_SetConfig+0xc0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00f      	beq.n	8002a08 <TIM_OC4_SetConfig+0x80>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <TIM_OC4_SetConfig+0xc4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00b      	beq.n	8002a08 <TIM_OC4_SetConfig+0x80>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <TIM_OC4_SetConfig+0xc8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d007      	beq.n	8002a08 <TIM_OC4_SetConfig+0x80>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a16      	ldr	r2, [pc, #88]	; (8002a54 <TIM_OC4_SetConfig+0xcc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d003      	beq.n	8002a08 <TIM_OC4_SetConfig+0x80>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <TIM_OC4_SetConfig+0xd0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d109      	bne.n	8002a1c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	019b      	lsls	r3, r3, #6
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	621a      	str	r2, [r3, #32]
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	feff8fff 	.word	0xfeff8fff
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40010400 	.word	0x40010400
 8002a50:	40014000 	.word	0x40014000
 8002a54:	40014400 	.word	0x40014400
 8002a58:	40014800 	.word	0x40014800

08002a5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <TIM_OC5_SetConfig+0xb0>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	041b      	lsls	r3, r3, #16
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <TIM_OC5_SetConfig+0xb4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00f      	beq.n	8002ad2 <TIM_OC5_SetConfig+0x76>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <TIM_OC5_SetConfig+0xb8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00b      	beq.n	8002ad2 <TIM_OC5_SetConfig+0x76>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <TIM_OC5_SetConfig+0xbc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d007      	beq.n	8002ad2 <TIM_OC5_SetConfig+0x76>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a15      	ldr	r2, [pc, #84]	; (8002b1c <TIM_OC5_SetConfig+0xc0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d003      	beq.n	8002ad2 <TIM_OC5_SetConfig+0x76>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <TIM_OC5_SetConfig+0xc4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d109      	bne.n	8002ae6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	621a      	str	r2, [r3, #32]
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	fffeff8f 	.word	0xfffeff8f
 8002b10:	40010000 	.word	0x40010000
 8002b14:	40010400 	.word	0x40010400
 8002b18:	40014000 	.word	0x40014000
 8002b1c:	40014400 	.word	0x40014400
 8002b20:	40014800 	.word	0x40014800

08002b24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <TIM_OC6_SetConfig+0xb4>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	051b      	lsls	r3, r3, #20
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a19      	ldr	r2, [pc, #100]	; (8002bdc <TIM_OC6_SetConfig+0xb8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00f      	beq.n	8002b9c <TIM_OC6_SetConfig+0x78>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <TIM_OC6_SetConfig+0xbc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00b      	beq.n	8002b9c <TIM_OC6_SetConfig+0x78>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a17      	ldr	r2, [pc, #92]	; (8002be4 <TIM_OC6_SetConfig+0xc0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d007      	beq.n	8002b9c <TIM_OC6_SetConfig+0x78>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a16      	ldr	r2, [pc, #88]	; (8002be8 <TIM_OC6_SetConfig+0xc4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d003      	beq.n	8002b9c <TIM_OC6_SetConfig+0x78>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a15      	ldr	r2, [pc, #84]	; (8002bec <TIM_OC6_SetConfig+0xc8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d109      	bne.n	8002bb0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	029b      	lsls	r3, r3, #10
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	621a      	str	r2, [r3, #32]
}
 8002bca:	bf00      	nop
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	feff8fff 	.word	0xfeff8fff
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	40010400 	.word	0x40010400
 8002be4:	40014000 	.word	0x40014000
 8002be8:	40014400 	.word	0x40014400
 8002bec:	40014800 	.word	0x40014800

08002bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f023 0201 	bic.w	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f023 030a 	bic.w	r3, r3, #10
 8002c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	621a      	str	r2, [r3, #32]
}
 8002c42:	bf00      	nop
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b087      	sub	sp, #28
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f023 0210 	bic.w	r2, r3, #16
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	031b      	lsls	r3, r3, #12
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	621a      	str	r2, [r3, #32]
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <TIM_ITRx_SetConfig+0x38>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f043 0307 	orr.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	609a      	str	r2, [r3, #8]
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	ffcfff8f 	.word	0xffcfff8f

08002cec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	021a      	lsls	r2, r3, #8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	609a      	str	r2, [r3, #8]
}
 8002d20:	bf00      	nop
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e06d      	b.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a30      	ldr	r2, [pc, #192]	; (8002e2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d004      	beq.n	8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2f      	ldr	r2, [pc, #188]	; (8002e30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d108      	bne.n	8002d8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a20      	ldr	r2, [pc, #128]	; (8002e2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d022      	beq.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db6:	d01d      	beq.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d018      	beq.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d013      	beq.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1a      	ldr	r2, [pc, #104]	; (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00e      	beq.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a15      	ldr	r2, [pc, #84]	; (8002e30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d009      	beq.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a16      	ldr	r2, [pc, #88]	; (8002e40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d004      	beq.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a15      	ldr	r2, [pc, #84]	; (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d10c      	bne.n	8002e0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40010400 	.word	0x40010400
 8002e34:	40000400 	.word	0x40000400
 8002e38:	40000800 	.word	0x40000800
 8002e3c:	40000c00 	.word	0x40000c00
 8002e40:	40001800 	.word	0x40001800
 8002e44:	40014000 	.word	0x40014000

08002e48 <memset>:
 8002e48:	4402      	add	r2, r0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d100      	bne.n	8002e52 <memset+0xa>
 8002e50:	4770      	bx	lr
 8002e52:	f803 1b01 	strb.w	r1, [r3], #1
 8002e56:	e7f9      	b.n	8002e4c <memset+0x4>

08002e58 <__libc_init_array>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	4d0d      	ldr	r5, [pc, #52]	; (8002e90 <__libc_init_array+0x38>)
 8002e5c:	4c0d      	ldr	r4, [pc, #52]	; (8002e94 <__libc_init_array+0x3c>)
 8002e5e:	1b64      	subs	r4, r4, r5
 8002e60:	10a4      	asrs	r4, r4, #2
 8002e62:	2600      	movs	r6, #0
 8002e64:	42a6      	cmp	r6, r4
 8002e66:	d109      	bne.n	8002e7c <__libc_init_array+0x24>
 8002e68:	4d0b      	ldr	r5, [pc, #44]	; (8002e98 <__libc_init_array+0x40>)
 8002e6a:	4c0c      	ldr	r4, [pc, #48]	; (8002e9c <__libc_init_array+0x44>)
 8002e6c:	f000 f818 	bl	8002ea0 <_init>
 8002e70:	1b64      	subs	r4, r4, r5
 8002e72:	10a4      	asrs	r4, r4, #2
 8002e74:	2600      	movs	r6, #0
 8002e76:	42a6      	cmp	r6, r4
 8002e78:	d105      	bne.n	8002e86 <__libc_init_array+0x2e>
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e80:	4798      	blx	r3
 8002e82:	3601      	adds	r6, #1
 8002e84:	e7ee      	b.n	8002e64 <__libc_init_array+0xc>
 8002e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8a:	4798      	blx	r3
 8002e8c:	3601      	adds	r6, #1
 8002e8e:	e7f2      	b.n	8002e76 <__libc_init_array+0x1e>
 8002e90:	08002ec8 	.word	0x08002ec8
 8002e94:	08002ec8 	.word	0x08002ec8
 8002e98:	08002ec8 	.word	0x08002ec8
 8002e9c:	08002ecc 	.word	0x08002ecc

08002ea0 <_init>:
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea2:	bf00      	nop
 8002ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea6:	bc08      	pop	{r3}
 8002ea8:	469e      	mov	lr, r3
 8002eaa:	4770      	bx	lr

08002eac <_fini>:
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	bf00      	nop
 8002eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb2:	bc08      	pop	{r3}
 8002eb4:	469e      	mov	lr, r3
 8002eb6:	4770      	bx	lr
